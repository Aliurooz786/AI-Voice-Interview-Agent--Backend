package com.interview.agent.model;

import jakarta.persistence.*;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

/**
 * Represents an Interview entity in the database.
 * Each instance corresponds to a single interview created by a user.
 * This class is mapped to the "interviews" table.
 */
@Entity
@Table(name = "interviews")
@Data
public class Interview {

    /**
     * The unique identifier for the interview.
     * This is the primary key and is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The job title or position for which the interview is being created.
     * This field cannot be null.
     */
    @Column(nullable = false)
    private String jobPosition;

    /**
     * The detailed job description for the position.
     * Mapped to a TEXT column to accommodate long descriptions.
     */
    @Column(columnDefinition = "TEXT")
    private String jobDescription;

    /**
     * The raw JSON string of interview questions generated by the Gemini API.
     * Mapped to a TEXT column to store the potentially large JSON response.
     */
    @Column(columnDefinition = "TEXT")
    private String generatedQuestions;

    /**
     * The timestamp when the interview record was created.
     * This is automatically set by Hibernate upon creation and cannot be updated.
     */
    @CreationTimestamp
    @Column(updatable = false, nullable = false)
    private LocalDateTime createdAt;

    /**
     * The user who created this interview.
     * This establishes a many-to-one relationship: many interviews can belong to one user.
     * The {@code @JoinColumn} creates a 'user_id' foreign key in the 'interviews' table.
     * FetchType.LAZY ensures the associated User is not loaded from the database until it's explicitly accessed.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
}